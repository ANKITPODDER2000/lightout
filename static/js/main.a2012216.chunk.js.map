{"version":3,"sources":["Cell.js","Header.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","a","bind","this","handleClick","pos","className","class","onClick","Component","Header","clnm","first","second","defaultProps","Board","matrix","createMatrix","state","win","click","setState","arr","i","norow","innerArray","j","nocol","Math","floor","random","push","currentState","copyMatrix","split","x","y","Number","changeMatrix","key","String","restart","map","ele","ind","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2012216.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nclass Cell extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.a = this.a.bind(this);\r\n    }\r\n    a() {\r\n        this.props.handleClick(this.props.pos);\r\n    }\r\n    render() {\r\n        return (\r\n            <td className={this.props.class} onClick={this.a}></td>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Cell;","import React, { Component } from 'react';\r\nimport \"./Header.css\";\r\n\r\nclass Header extends Component{\r\n    static defaultProps = {\r\n        clnm : \"\",\r\n    }\r\n    render() {\r\n        return (\r\n            <h1 className={this.props.clnm}><span className=\"neon\">{this.props.first}</span><span className=\"flux\">{this.props.second}</span></h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport Cell from \"./Cell\";\r\nimport Header from \"./Header\";\r\nimport \"./Board.css\";\r\n\r\nclass Board extends Component{\r\n    static defaultProps = {\r\n        norow: 5, \r\n        nocol : 5\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let matrix = this.createMatrix();\r\n        this.state = {\r\n            matrix: matrix,\r\n            win : false\r\n        }\r\n        this.click = this.click.bind(this);\r\n    }\r\n    restart() {\r\n        let matrix = this.createMatrix();\r\n        this.setState({\r\n            matrix: matrix,\r\n            win: false\r\n        });\r\n    }\r\n    createMatrix() {\r\n        let arr = [];\r\n        for (let i = 0; i < this.props.norow; i++){\r\n            let innerArray = [];\r\n            for (let j = 0; j < this.props.nocol; j++){\r\n                let a = Math.floor(Math.random() * 100);\r\n                if (a <= 75) {\r\n                    innerArray.push(false); //false -> Light is off\r\n                } else {\r\n                    innerArray.push(true); //true -> Light is on\r\n                }\r\n            }\r\n            arr.push(innerArray);\r\n        }\r\n        return arr;\r\n    }\r\n    changeMatrix(currentState, copyMatrix) {\r\n        for (let i = 0; i < this.props.norow; i++){\r\n            for (let j = 0; j < this.props.nocol; j++){\r\n                if (!copyMatrix[i][j]) {\r\n                    return {\r\n                        matrix: copyMatrix\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            matrix: copyMatrix, \r\n            win   : true\r\n        }\r\n    }\r\n    click(pos) {\r\n        let [x, y] = pos.split(\"_\");\r\n        x = Number(x);\r\n        y = Number(y);\r\n        let copyMatrix = this.state.matrix;\r\n        copyMatrix[x][y] = !copyMatrix[x][y];\r\n        if (x - 1 >= 0)\r\n            copyMatrix[x - 1][y] = !copyMatrix[x - 1][y];\r\n        if (x + 1 < this.props.norow)\r\n            copyMatrix[x + 1][y] = !copyMatrix[x + 1][y];\r\n        if (y - 1 >= 0)\r\n            copyMatrix[x][y - 1] = !copyMatrix[x][y - 1];\r\n        if (y + 1 < this.props.nocol)\r\n            copyMatrix[x][y + 1] = !copyMatrix[x][y + 1];\r\n        /*\r\n        for (let x = 0; x < 5; x++){\r\n            for (let y = 0; y < 5; y++){\r\n                copyMatrix[x][y] = true\r\n            }\r\n        }\r\n        */\r\n        this.setState(currentState => this.changeMatrix(currentState , copyMatrix));\r\n    }\r\n\r\n    render() {\r\n        let arr = [];\r\n        for (let i = 0; i < this.props.norow; i++){\r\n            let innerArray = [];\r\n            for (let j = 0; j < this.props.nocol; j++){\r\n                if (this.state.matrix[i][j]) {\r\n                    innerArray.push(<Cell\r\n                        class=\"light-on\"\r\n                        key={String(i) + \"_\" + String(j)} \r\n                        pos={String(i) + \"_\" + String(j)} \r\n                        handleClick={this.click}\r\n                    />);\r\n                } else {\r\n                    innerArray.push(<Cell\r\n                        key={String(i) + \"_\" + String(j)}\r\n                        pos={String(i) + \"_\" + String(j)}\r\n                        handleClick={this.click}\r\n                    />);\r\n                }\r\n            }\r\n            arr.push(innerArray);\r\n        }\r\n        return (\r\n            <div>\r\n                {!this.state.win\r\n                    ?\r\n                    <div>\r\n                        <Header first=\"Light\" second=\"Out\" />\r\n                        <table>\r\n                            <tbody>\r\n                                {arr.map((ele, ind) => <tr key={ind} >{ele}</tr>)}\r\n                            </tbody>\r\n                        </table>\r\n                        <button onClick={this.restart.bind(this)}>Restart ?</button>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <Header clnm=\"winner\" first=\"You\" second=\"Win!\" />\r\n                        <button onClick = {this.restart.bind(this)}>Play Again?</button>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React, { Component } from 'react';\nimport Board from \"./Board\"\nimport './App.css';\n\nclass App extends Component{\n    render() {\n        return (\n            <div className=\"app\">\n                <Board\n                    norow={5}\n                    nocol={5}\n                />\n            </div>\n        )\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}